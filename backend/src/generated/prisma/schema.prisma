// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid()) //16bytes
  name       String
  email      String
  password   String
  created_at DateTime?   @default(now())
  update_at  DateTime?   @default(now())
  favorites  Favorites[]
  table      Table[]

  @@map("users")
}

model Category {
  id         String    @id @default(uuid())
  name       String
  created_at DateTime? @default(now())
  update_at  DateTime? @default(now())
  products   Product[]

  @@map("categories")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  price       String
  description String
  banner      String
  created_at  DateTime? @default(now())
  update_at   DateTime? @default(now())

  category    Category            @relation(fields: [category_id], references: [id])
  category_id String
  items       Item[]
  favorites   Favorites[]
  ingredients ProductIngredient[]

  @@map("products")
}

model Order {
  id          String    @id @default(uuid())
  status      Boolean   @default(false)
  draft       Boolean   @default(true)
  name        String?
  created_at  DateTime? @default(now())
  update_at   DateTime? @default(now())
  observation String    @default("")

  table    Table  @relation(fields: [table_id], references: [id])
  table_id String
  items    Item[]

  @@map("orders")
}

model Item {
  id         String    @id @default(uuid())
  amount     Int
  created_at DateTime? @default(now())
  update_at  DateTime? @default(now())

  order      Order   @relation(fields: [order_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])
  order_id   String
  product_id String

  @@map("items")
}

model Favorites {
  id         String    @id @default(uuid())
  created_at DateTime? @default(now())
  update_at  DateTime? @default(now())

  product    Product @relation(fields: [product_id], references: [id])
  users      User    @relation(fields: [users_id], references: [id])
  product_id String
  users_id   String

  @@map("favorites")
}

model Ingredients {
  id         String    @id @default(uuid())
  name       String
  price      Decimal   @default(0.00)
  banner     String?
  created_at DateTime? @default(now())
  update_at  DateTime? @default(now())

  products ProductIngredient[]

  @@map("ingredients")
}

model ProductIngredient {
  productId    String
  ingredientId String
  amount       Int
  product      Product     @relation(fields: [productId], references: [id])
  ingredient   Ingredients @relation(fields: [ingredientId], references: [id])

  @@id([productId, ingredientId])
}

model Table {
  id         String    @id @default(uuid())
  number     Int
  created_at DateTime? @default(now())
  update_at  DateTime? @default(now())

  users    User?   @relation(fields: [users_id], references: [id])
  users_id String?
  order    Order[]

  @@map("table")
}
